// Declare our operators list
const operatorsList = ['clearElement', 'clear', 'back', 'div', 'mul', 'sub', 'add', 'sign', 'dot', 'equals'];

// Grab our screen element
const myScreen = document.getElementById('calculator__screen-value');

// Init screen value
let currentValue = 0;
refreshScreen();

// Grab all our buttons
const buttons = document.getElementsByClassName("calculator__button");
for (let button of buttons) {
  button.addEventListener('click', processClick.bind(button));
}


/////////////////////////////
//  Helper functions
//

/**
 * Refresh our screen with current value
 */
function refreshScreen() {
  myScreen.value = currentValue;
}

/**
 * Process a click on one of our buttons. When called, 'this' is bound to the clicked button
 * 
 * @param {MouseEvent} event DOM event generated by the click
 */
function processClick(event) {
  const buttonValue = this.value;
  if (isOperator(buttonValue)) {
    processOperator(buttonValue);
  } else {
    processNumber(buttonValue);
  }
}

/**
 * Process one of our calculator's operator
 * @param {any} operatorSymbol  The symbol of the operator to process
 */
function processOperator(operatorSymbol) {
  console.log("Operator: " + operatorSymbol);
}

/**
 * Process a number input
 * @param {any} numberAsString  The input number as a string
 */
function processNumber(numberAsString) {
  console.log("Number: " + numberAsString);
}

/**
 * Check if symbol is an operator
 * 
 * @param {any} stringValue Test value
 * 
 * @returns {boolean} True if value is a known operator
 */
function isOperator(stringValue) {
  return operatorsList.indexOf(stringValue) > -1;
}

/**
 * Check if symbol is a number
 * 
 * @param {any} stringValue Test value
 * 
 * @returns {boolean} True if value is a number
 */
function isNumber(stringValue) {
  return !isNaN(parseFloat(stringValue));
}